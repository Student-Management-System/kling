/**
 * Kling-API
 * The Kling-API. <a href='http://localhost:3100/api-json'>JSON</a>
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from "@angular/core";
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from "@angular/common/http";
import { CustomHttpUrlEncodingCodec } from "../encoder";

import { Observable } from "rxjs";

import { BASE_PATH, COLLECTION_FORMATS } from "../variables";
import { Configuration } from "../configuration";

@Injectable()
export class CategoryService {
	protected basePath = "/";
	public defaultHeaders = new HttpHeaders();
	public configuration = new Configuration();

	constructor(
		protected httpClient: HttpClient,
		@Optional() @Inject(BASE_PATH) basePath: string,
		@Optional() configuration: Configuration
	) {
		if (basePath) {
			this.basePath = basePath;
		}
		if (configuration) {
			this.configuration = configuration;
			this.basePath = basePath || configuration.basePath || this.basePath;
		}
	}

	/**
	 * @param consumes string[] mime-types
	 * @return true: consumes contains 'multipart/form-data', false: otherwise
	 */
	private canConsumeForm(consumes: string[]): boolean {
		const form = "multipart/form-data";
		for (const consume of consumes) {
			if (form === consume) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Create category.
	 * Creates a new category with the given name, if it does not exist already.
	 * @param name
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public createCategory(
		name: string,
		observe?: "body",
		reportProgress?: boolean
	): Observable<any>;
	public createCategory(
		name: string,
		observe?: "response",
		reportProgress?: boolean
	): Observable<HttpResponse<any>>;
	public createCategory(
		name: string,
		observe?: "events",
		reportProgress?: boolean
	): Observable<HttpEvent<any>>;
	public createCategory(
		name: string,
		observe: any = "body",
		reportProgress: boolean = false
	): Observable<any> {
		if (name === null || name === undefined) {
			throw new Error(
				"Required parameter name was null or undefined when calling createCategory."
			);
		}

		let headers = this.defaultHeaders;

		// to determine the Accept header
		let httpHeaderAccepts: string[] = [];
		const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(
			httpHeaderAccepts
		);
		if (httpHeaderAcceptSelected != undefined) {
			headers = headers.set("Accept", httpHeaderAcceptSelected);
		}

		// to determine the Content-Type header
		const consumes: string[] = [];

		return this.httpClient.request<any>(
			"put",
			`${this.basePath}/categories/${encodeURIComponent(String(name))}`,
			{
				withCredentials: this.configuration.withCredentials,
				headers: headers,
				observe: observe,
				reportProgress: reportProgress
			}
		);
	}

	/**
	 * Find categories.
	 * Retrieves all categories that match the specified filter.
	 * @param skip [Pagination] The amount of elements that should be skipped.
	 * @param take [Pagination] The amount of elements that should be included in the response.
	 * @param name Name of the category. Matched with ILIKE name%.
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public findCategories(
		skip?: number,
		take?: number,
		name?: string,
		observe?: "body",
		reportProgress?: boolean
	): Observable<Array<string>>;
	public findCategories(
		skip?: number,
		take?: number,
		name?: string,
		observe?: "response",
		reportProgress?: boolean
	): Observable<HttpResponse<Array<string>>>;
	public findCategories(
		skip?: number,
		take?: number,
		name?: string,
		observe?: "events",
		reportProgress?: boolean
	): Observable<HttpEvent<Array<string>>>;
	public findCategories(
		skip?: number,
		take?: number,
		name?: string,
		observe: any = "body",
		reportProgress: boolean = false
	): Observable<any> {
		let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
		if (skip !== undefined && skip !== null) {
			queryParameters = queryParameters.set("skip", <any>skip);
		}
		if (take !== undefined && take !== null) {
			queryParameters = queryParameters.set("take", <any>take);
		}
		if (name !== undefined && name !== null) {
			queryParameters = queryParameters.set("name", <any>name);
		}

		let headers = this.defaultHeaders;

		// to determine the Accept header
		let httpHeaderAccepts: string[] = ["application/json"];
		const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(
			httpHeaderAccepts
		);
		if (httpHeaderAcceptSelected != undefined) {
			headers = headers.set("Accept", httpHeaderAcceptSelected);
		}

		// to determine the Content-Type header
		const consumes: string[] = [];

		return this.httpClient.request<Array<string>>("get", `${this.basePath}/categories`, {
			params: queryParameters,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * Remove category.
	 * Removes the specified category.
	 * @param name
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public removeCategory(
		name: string,
		observe?: "body",
		reportProgress?: boolean
	): Observable<any>;
	public removeCategory(
		name: string,
		observe?: "response",
		reportProgress?: boolean
	): Observable<HttpResponse<any>>;
	public removeCategory(
		name: string,
		observe?: "events",
		reportProgress?: boolean
	): Observable<HttpEvent<any>>;
	public removeCategory(
		name: string,
		observe: any = "body",
		reportProgress: boolean = false
	): Observable<any> {
		if (name === null || name === undefined) {
			throw new Error(
				"Required parameter name was null or undefined when calling removeCategory."
			);
		}

		let headers = this.defaultHeaders;

		// to determine the Accept header
		let httpHeaderAccepts: string[] = [];
		const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(
			httpHeaderAccepts
		);
		if (httpHeaderAcceptSelected != undefined) {
			headers = headers.set("Accept", httpHeaderAcceptSelected);
		}

		// to determine the Content-Type header
		const consumes: string[] = [];

		return this.httpClient.request<any>(
			"delete",
			`${this.basePath}/categories/${encodeURIComponent(String(name))}`,
			{
				withCredentials: this.configuration.withCredentials,
				headers: headers,
				observe: observe,
				reportProgress: reportProgress
			}
		);
	}
}
