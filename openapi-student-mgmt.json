{
	"openapi": "3.0.0",
	"info": {
		"title": "Student-Management-System-API",
		"description": "The Student-Management-System-API. <a href='http://localhost:3000/api-json'>JSON</a>",
		"version": "1.0",
		"contact": {}
	},
	"tags": [
		{ "name": "authentication", "description": "" },
		{ "name": "course", "description": "" },
		{ "name": "course-participants", "description": "" },
		{ "name": "course-config", "description": "" },
		{ "name": "assignment", "description": "" },
		{ "name": "assessment", "description": "" },
		{ "name": "group", "description": "" },
		{ "name": "user", "description": "" },
		{ "name": "assignment-registration", "description": "" },
		{ "name": "admission-status", "description": "" },
		{ "name": "submission", "description": "" },
		{ "name": "assessment-allocation", "description": "" },
		{ "name": "notification", "description": "" }
	],
	"servers": [],
	"components": {
		"securitySchemes": {
			"bearer": { "scheme": "bearer", "bearerFormat": "JWT", "type": "http" }
		},
		"schemas": {
			"LinkDto": {
				"type": "object",
				"properties": { "url": { "type": "string" }, "name": { "type": "string" } },
				"required": ["url", "name"]
			},
			"GroupSettingsDto": {
				"type": "object",
				"properties": {
					"allowGroups": {
						"type": "boolean",
						"description": "Determines, wether course allows group creation."
					},
					"nameSchema": {
						"type": "string",
						"description": "If utilized, all group names will use the nameSchema followed by the group's number."
					},
					"sizeMin": {
						"type": "number",
						"minimum": 0,
						"description": "The required amount of members the group needs in order to submit group-assignments."
					},
					"sizeMax": {
						"type": "number",
						"minimum": 0,
						"description": "The maximum amount of members in a group."
					},
					"selfmanaged": {
						"type": "boolean",
						"description": "Indicates, wether the group is managed by its members."
					},
					"autoJoinGroupOnCourseJoined": {
						"type": "boolean",
						"description": "If enabled, participants that join the course will automatically join a group."
					},
					"mergeGroupsOnAssignmentStarted": {
						"type": "boolean",
						"description": "If enabled, groups that don't have enough members will be merged when an assignment starts."
					}
				},
				"required": [
					"allowGroups",
					"sizeMin",
					"sizeMax",
					"selfmanaged",
					"autoJoinGroupOnCourseJoined",
					"mergeGroupsOnAssignmentStarted"
				]
			},
			"RoundingBehavior": {
				"type": "object",
				"properties": {
					"type": {
						"type": "string",
						"enum": ["NONE", "DECIMALS", "DOWN_NEAREST_INTEGER", "UP_NEAREST_INTEGER"]
					},
					"decimals": { "type": "number" }
				},
				"required": ["type"]
			},
			"AdmissionRuleDto": {
				"type": "object",
				"properties": {
					"type": {
						"enum": [
							"INDIVIDUAL_PERCENT_WITH_ALLOWED_FAILURES",
							"REQUIRED_PERCENT_OVERALL"
						],
						"type": "string"
					},
					"assignmentType": {
						"enum": ["HOMEWORK", "TESTAT", "SEMINAR", "PROJECT", "OTHER"],
						"type": "string"
					},
					"requiredPercent": { "type": "number", "minimum": 0, "maximum": 100 },
					"achievedPercentRounding": { "$ref": "#/components/schemas/RoundingBehavior" }
				},
				"required": ["type", "assignmentType", "requiredPercent", "achievedPercentRounding"]
			},
			"AdmissionCriteriaDto": {
				"type": "object",
				"properties": {
					"rules": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/AdmissionRuleDto" }
					}
				},
				"required": ["rules"]
			},
			"CourseDto": {
				"type": "object",
				"properties": {
					"id": { "type": "string", "description": "Unique identifier of this course." },
					"shortname": {
						"type": "string",
						"description": "Shortname of this course, i.e \"java\". Should be reused every semester. Will be used in URLs."
					},
					"semester": {
						"type": "string",
						"description": "Semester that the iteration of this course belong to."
					},
					"title": {
						"type": "string",
						"description": "The full title of this course, i.e Programming I: Java"
					},
					"isClosed": {
						"type": "boolean",
						"description": "Determines, wether changes (i.e joining this course) can be made to this course."
					},
					"links": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/LinkDto" }
					},
					"groupSettings": { "$ref": "#/components/schemas/GroupSettingsDto" },
					"admissionCriteria": { "$ref": "#/components/schemas/AdmissionCriteriaDto" }
				},
				"required": ["shortname", "semester", "title", "isClosed"]
			},
			"UserDto": {
				"type": "object",
				"properties": {
					"id": { "type": "string", "description": "Unique identifier of this user." },
					"role": {
						"enum": ["SYSTEM_ADMIN", "ADMIN_TOOL", "MGMT_ADMIN", "USER"],
						"type": "string",
						"description": "Role within the application."
					},
					"matrNr": { "type": "number" },
					"email": { "type": "string" },
					"username": { "type": "string" },
					"displayName": { "type": "string" },
					"courses": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/CourseDto" }
					}
				},
				"required": ["role", "username", "displayName"]
			},
			"AssignmentDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of this assignment."
					},
					"name": { "type": "string", "description": "The title of this assignment." },
					"state": {
						"enum": ["INVISIBLE", "CLOSED", "IN_PROGRESS", "IN_REVIEW", "EVALUATED"],
						"type": "string",
						"description": "Determines, wether students can submit, assessments should be published, etc."
					},
					"startDate": {
						"format": "date-time",
						"type": "string",
						"description": "Date at which this assignment should enter the IN_PROGRESS-state to allow submissions."
					},
					"endDate": {
						"format": "date-time",
						"type": "string",
						"description": "Date at which this assignment should enter the IN_REVIEW-state to disable submissions."
					},
					"type": {
						"enum": ["HOMEWORK", "TESTAT", "SEMINAR", "PROJECT", "OTHER"],
						"type": "string",
						"description": "The type of assignment, i.e homework or project.",
						"example": "HOMEWORK"
					},
					"collaboration": {
						"enum": ["GROUP", "SINGLE", "GROUP_OR_SINGLE"],
						"type": "string",
						"description": "Determines, wether students can submit their solutions in groups, alone or both."
					},
					"points": {
						"type": "number",
						"description": "The amount of points that can be reached by a participant (exluding bonus points)."
					},
					"bonusPoints": {
						"type": "number",
						"description": "The amount of additional bonus points, which should be exluded from the admission criteria."
					},
					"comment": {
						"type": "string",
						"description": "Additional information or description of this assignment."
					},
					"links": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/LinkDto" }
					}
				},
				"required": ["name", "state", "type", "collaboration", "points"]
			},
			"AssignmentUpdateDto": {
				"type": "object",
				"properties": {
					"name": { "type": "string", "description": "The title of this assignment." },
					"state": {
						"enum": ["INVISIBLE", "CLOSED", "IN_PROGRESS", "IN_REVIEW", "EVALUATED"],
						"type": "string",
						"description": "Determines, wether students can submit, assessments should be published, etc."
					},
					"startDate": {
						"format": "date-time",
						"type": "string",
						"description": "Date at which this assignment should enter the IN_PROGRESS-state to allow submissions."
					},
					"endDate": {
						"format": "date-time",
						"type": "string",
						"description": "Date at which this assignment should enter the IN_REVIEW-state to disable submissions."
					},
					"type": {
						"enum": ["HOMEWORK", "TESTAT", "SEMINAR", "PROJECT", "OTHER"],
						"type": "string",
						"description": "The type of assignment, i.e homework or project.",
						"example": "HOMEWORK"
					},
					"collaboration": {
						"enum": ["GROUP", "SINGLE", "GROUP_OR_SINGLE"],
						"type": "string",
						"description": "Determines, wether students can submit their solutions in groups, alone or both."
					},
					"points": {
						"type": "number",
						"description": "The amount of points that can be reached by a participant (exluding bonus points)."
					},
					"bonusPoints": {
						"type": "number",
						"description": "The amount of additional bonus points, which should be exluded from the admission criteria."
					},
					"comment": {
						"type": "string",
						"description": "Additional information or description of this assignment."
					},
					"links": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/LinkDto" }
					}
				}
			},
			"GroupEventDto": {
				"type": "object",
				"properties": {
					"user": { "$ref": "#/components/schemas/UserDto" },
					"userId": { "type": "string" },
					"groupId": { "type": "string" },
					"event": { "type": "string" },
					"timestamp": { "format": "date-time", "type": "string" },
					"payload": { "type": "object" }
				},
				"required": ["userId", "groupId", "event", "timestamp"]
			},
			"GroupDto": {
				"type": "object",
				"properties": {
					"id": { "type": "string", "description": "Unique identifier of this group." },
					"name": { "type": "string", "description": "Name of the group." },
					"password": {
						"type": "string",
						"description": "Password required to enter the group."
					},
					"hasPassword": {
						"type": "boolean",
						"description": "Indicates, wether group has a password. Set by the server."
					},
					"size": {
						"type": "number",
						"description": "Count of group members. Set by the server."
					},
					"isClosed": {
						"type": "boolean",
						"description": "Determines, wether course participant are able to join this group."
					},
					"members": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/ParticipantDto" }
					},
					"history": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/GroupEventDto" }
					}
				},
				"required": ["name"]
			},
			"ParticipantDto": {
				"type": "object",
				"properties": {
					"userId": { "type": "string" },
					"username": { "type": "string" },
					"displayName": { "type": "string" },
					"matrNr": { "type": "number" },
					"email": { "type": "string" },
					"role": { "enum": ["LECTURER", "TUTOR", "STUDENT"], "type": "string" },
					"groupId": { "type": "string" },
					"group": { "$ref": "#/components/schemas/GroupDto" }
				},
				"required": ["userId", "username", "displayName", "role"]
			},
			"AssignmentTemplateDto": {
				"type": "object",
				"properties": {
					"name": { "type": "string", "description": "The title of this assignment." },
					"state": {
						"enum": ["INVISIBLE", "CLOSED", "IN_PROGRESS", "IN_REVIEW", "EVALUATED"],
						"type": "string",
						"description": "Determines, wether students can submit, assessments should be published, etc."
					},
					"startDate": {
						"format": "date-time",
						"type": "string",
						"description": "Date at which this assignment should enter the IN_PROGRESS-state to allow submissions."
					},
					"endDate": {
						"format": "date-time",
						"type": "string",
						"description": "Date at which this assignment should enter the IN_REVIEW-state to disable submissions."
					},
					"type": {
						"enum": ["HOMEWORK", "TESTAT", "SEMINAR", "PROJECT", "OTHER"],
						"type": "string",
						"description": "The type of assignment, i.e homework or project.",
						"example": "HOMEWORK"
					},
					"collaboration": {
						"enum": ["GROUP", "SINGLE", "GROUP_OR_SINGLE"],
						"type": "string",
						"description": "Determines, wether students can submit their solutions in groups, alone or both."
					},
					"points": {
						"type": "number",
						"description": "The amount of points that can be reached by a participant (exluding bonus points)."
					},
					"bonusPoints": {
						"type": "number",
						"description": "The amount of additional bonus points, which should be exluded from the admission criteria."
					},
					"comment": {
						"type": "string",
						"description": "Additional information or description of this assignment."
					},
					"id": {
						"type": "number",
						"description": "Unique identifier of this template."
					},
					"templateName": {
						"type": "string",
						"description": "The name of this template."
					},
					"timespanDays": {
						"type": "number",
						"description": "Time between start and end of the assignment (in days)."
					},
					"links": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/LinkDto" }
					}
				},
				"required": ["templateName"]
			},
			"CourseConfigDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "number",
						"description": "Unique identifier of the configuration."
					},
					"password": {
						"type": "string",
						"description": "Password required to sign up for the course."
					},
					"groupSettings": { "$ref": "#/components/schemas/GroupSettingsDto" },
					"admissionCriteria": { "$ref": "#/components/schemas/AdmissionCriteriaDto" },
					"assignmentTemplates": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/AssignmentTemplateDto" }
					}
				}
			},
			"CourseConfigUpdateDto": {
				"type": "object",
				"properties": {
					"password": {
						"type": "string",
						"description": "Password required to sign up for the course."
					}
				}
			},
			"GroupSettingsUpdateDto": {
				"type": "object",
				"properties": {
					"allowGroups": {
						"type": "boolean",
						"description": "Determines, wether course allows group creation."
					},
					"nameSchema": {
						"type": "string",
						"description": "If utilized, all group names will use the nameSchema followed by the group's number."
					},
					"sizeMin": {
						"type": "number",
						"minimum": 0,
						"description": "The required amount of members the group needs in order to submit group-assignments."
					},
					"sizeMax": {
						"type": "number",
						"minimum": 0,
						"description": "The maximum amount of members in a group."
					},
					"selfmanaged": {
						"type": "boolean",
						"description": "Indicates, wether the group is managed by its members."
					},
					"autoJoinGroupOnCourseJoined": {
						"type": "boolean",
						"description": "If enabled, participants that join the course will automatically join a group."
					},
					"mergeGroupsOnAssignmentStarted": {
						"type": "boolean",
						"description": "If enabled, groups that don't have enough members will be merged when an assignment starts."
					}
				}
			},
			"PasswordDto": {
				"type": "object",
				"properties": { "password": { "type": "string" } },
				"required": ["password"]
			},
			"ParticipantsComparisonDto": {
				"type": "object",
				"properties": {
					"inComparedCourses": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/UserDto" }
					},
					"notInComparedCourses": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/UserDto" }
					}
				},
				"required": ["inComparedCourses", "notInComparedCourses"]
			},
			"CanJoinCourseDto": {
				"type": "object",
				"properties": {
					"canJoin": {
						"type": "boolean",
						"description": "Indicates, wether the joining the course is possible."
					},
					"requiresPassword": {
						"type": "boolean",
						"description": "Indicates, wether the joining the course requires a password."
					},
					"reason": {
						"type": "string",
						"enum": ["CLOSED", "IS_MEMBER"],
						"description": "The reason why joining the course is not possible."
					}
				},
				"required": ["canJoin"]
			},
			"ParticipantsWithAssignedEvaluatorDto": {
				"type": "object",
				"properties": {
					"assignedEvaluatorId": {
						"type": "string",
						"description": "UserId of the assigned evaluator (for assignment)."
					},
					"assessmentId": {
						"type": "string",
						"description": "Id of the assessment for this user, if it exists."
					},
					"participant": { "$ref": "#/components/schemas/ParticipantDto" }
				},
				"required": ["participant"]
			},
			"ChangeCourseRoleDto": {
				"type": "object",
				"properties": {
					"role": { "type": "string", "enum": ["LECTURER", "TUTOR", "STUDENT"] }
				},
				"required": ["role"]
			},
			"CourseCreateDto": {
				"type": "object",
				"properties": {
					"id": { "type": "string", "description": "Unique identifier of this course." },
					"shortname": {
						"type": "string",
						"description": "Shortname of this course, i.e \"java\". Should be reused every semester. Will be used in URLs."
					},
					"semester": {
						"type": "string",
						"description": "Semester that the iteration of this course belong to."
					},
					"title": {
						"type": "string",
						"description": "The full title of this course, i.e Programming I: Java"
					},
					"isClosed": {
						"type": "boolean",
						"description": "Determines, wether changes (i.e joining this course) can be made to this course."
					},
					"config": { "$ref": "#/components/schemas/CourseConfigDto" },
					"lecturers": { "type": "array", "items": { "type": "string" } },
					"links": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/LinkDto" }
					}
				},
				"required": ["shortname", "semester", "title", "isClosed", "config"]
			},
			"CourseAboutDto": {
				"type": "object",
				"properties": {
					"course": { "$ref": "#/components/schemas/CourseDto" },
					"participantsCount": { "type": "number" },
					"teachingStaff": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/ParticipantDto" }
					}
				},
				"required": ["course", "participantsCount", "teachingStaff"]
			},
			"GroupCreateBulkDto": {
				"type": "object",
				"properties": {
					"names": {
						"description": "List of group names.",
						"type": "array",
						"items": { "type": "string" }
					},
					"nameSchema": {
						"type": "string",
						"description": "If utilized, all group names will use the nameSchema followed by the group's number."
					},
					"count": {
						"type": "number",
						"description": "The number of groups that should be created. Should only be used in conjunction with nameSchema."
					}
				}
			},
			"GroupWithAssignedEvaluatorDto": {
				"type": "object",
				"properties": {
					"assignedEvaluatorId": {
						"type": "string",
						"description": "UserId of the assigned evaluator (for assignment)."
					},
					"assessmentId": {
						"type": "string",
						"description": "Id of the assessment, if it exists."
					},
					"group": { "$ref": "#/components/schemas/GroupDto" }
				},
				"required": ["group"]
			},
			"MarkerDto": {
				"type": "object",
				"properties": {
					"path": { "type": "string" },
					"startLineNumber": { "type": "number" },
					"endLineNumber": { "type": "number" },
					"startColumn": { "type": "number" },
					"endColumn": { "type": "number" },
					"severity": { "enum": ["INFO", "HINT", "WARNING", "ERROR"], "type": "string" },
					"comment": { "type": "string" },
					"points": { "type": "number" }
				},
				"required": ["path", "startLineNumber", "endLineNumber", "severity", "comment"]
			},
			"PartialAssessmentDto": {
				"type": "object",
				"properties": {
					"key": { "type": "string" },
					"title": { "type": "string" },
					"draftOnly": { "type": "boolean" },
					"comment": { "type": "string" },
					"points": { "type": "number" },
					"markers": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/MarkerDto" }
					}
				},
				"required": ["title", "draftOnly"]
			},
			"AssessmentDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of this assessment."
					},
					"assignmentId": {
						"type": "string",
						"description": "Identifier of the assignment that is being evaluated by this assessment."
					},
					"isDraft": {
						"type": "boolean",
						"description": "Marks the assessment as a draft."
					},
					"achievedPoints": {
						"type": "number",
						"description": "The amount of points that the student or group achieved with their submission."
					},
					"comment": {
						"type": "string",
						"description": "A comment providing additional feedback."
					},
					"groupId": {
						"type": "string",
						"description": "If a group submission is being evaluated, contains the identifier of the group."
					},
					"userId": {
						"type": "string",
						"description": "If a single user is being evaluated, contains the identifier of the user."
					},
					"creatorId": {
						"type": "string",
						"description": "Identifier of the creator of this assessment."
					},
					"lastUpdatedById": {
						"type": "string",
						"description": "Identifier of the last user that updated this assessment."
					},
					"assignment": { "$ref": "#/components/schemas/AssignmentDto" },
					"group": { "$ref": "#/components/schemas/GroupDto" },
					"participant": { "$ref": "#/components/schemas/ParticipantDto" },
					"creator": { "$ref": "#/components/schemas/UserDto" },
					"lastUpdatedBy": { "$ref": "#/components/schemas/UserDto" },
					"creationDate": { "format": "date-time", "type": "string" },
					"updateDate": { "format": "date-time", "type": "string" },
					"partialAssessments": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/PartialAssessmentDto" }
					}
				},
				"required": ["assignmentId", "isDraft"]
			},
			"GroupUpdateDto": {
				"type": "object",
				"properties": {
					"name": { "type": "string" },
					"password": { "type": "string" },
					"isClosed": { "type": "boolean" }
				}
			},
			"AssignmentGroupTuple": {
				"type": "object",
				"properties": {
					"assignment": { "$ref": "#/components/schemas/AssignmentDto" },
					"group": { "$ref": "#/components/schemas/GroupDto" }
				},
				"required": ["assignment", "group"]
			},
			"UserUpdateDto": {
				"type": "object",
				"properties": {
					"role": {
						"enum": ["SYSTEM_ADMIN", "ADMIN_TOOL", "MGMT_ADMIN", "USER"],
						"type": "string",
						"description": "Role within the application."
					},
					"matrNr": { "type": "number" },
					"email": { "type": "string" },
					"displayName": { "type": "string" }
				},
				"required": ["role", "displayName"]
			},
			"UserSettingsDto": {
				"type": "object",
				"properties": {
					"language": { "enum": ["EN", "DE"], "type": "string" },
					"allowEmails": { "type": "boolean" },
					"blacklistedEvents": { "type": "object" }
				},
				"required": ["language", "allowEmails"]
			},
			"AssessmentAllocationDto": {
				"type": "object",
				"properties": {
					"assignedEvaluatorId": {
						"type": "string",
						"description": "UserId of the assigned evaluator."
					},
					"groupId": {
						"type": "string",
						"description": "GroupId of the group, whose solution should be evaluated by the assigned evaluator."
					},
					"userId": {
						"type": "string",
						"description": "UserId of the user, whose solution should be evaluated by the assigned evaluator."
					},
					"assignmentId": { "type": "string" }
				},
				"required": ["assignedEvaluatorId", "assignmentId"]
			},
			"AssessmentCreateDto": {
				"type": "object",
				"properties": {
					"assignmentId": {
						"type": "string",
						"description": "Identifier of the assignment that is being evaluated by this assessment."
					},
					"isDraft": {
						"type": "boolean",
						"description": "Marks the assessment as a draft."
					},
					"achievedPoints": {
						"type": "number",
						"description": "The amount of points that the student or group achieved with their submission."
					},
					"comment": {
						"type": "string",
						"description": "A comment providing additional feedback."
					},
					"groupId": {
						"type": "string",
						"description": "If a group submission is being evaluated, contains the identifier of the group."
					},
					"userId": {
						"type": "string",
						"description": "If a single user is being evaluated, contains the identifier of the user."
					},
					"partialAssessments": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/PartialAssessmentDto" }
					}
				},
				"required": ["assignmentId", "isDraft"]
			},
			"AssessmentEventDto": {
				"type": "object",
				"properties": {
					"assessmentId": { "type": "string" },
					"userId": { "type": "string" },
					"user": { "$ref": "#/components/schemas/UserDto" },
					"event": { "type": "string" },
					"timestamp": { "format": "date-time", "type": "string" },
					"payload": { "type": "object" }
				},
				"required": ["assessmentId", "userId", "user", "event", "timestamp"]
			},
			"AssessmentUpdateDto": {
				"type": "object",
				"properties": {
					"achievedPoints": { "type": "number" },
					"isDraft": { "type": "boolean" },
					"comment": { "type": "string" },
					"partialAssessments": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/PartialAssessmentDto" }
					}
				}
			},
			"StudentResults": {
				"type": "object",
				"properties": {
					"student": { "$ref": "#/components/schemas/ParticipantDto" },
					"achievedPoints": { "type": "array", "items": { "type": "number" } },
					"assessmentIds": { "type": "array", "items": { "type": "string" } }
				},
				"required": ["student", "achievedPoints", "assessmentIds"]
			},
			"PointsOverviewDto": {
				"type": "object",
				"properties": {
					"assignments": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/AssignmentDto" }
					},
					"results": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/StudentResults" }
					}
				},
				"required": ["assignments", "results"]
			},
			"RuleCheckResult": {
				"type": "object",
				"properties": {
					"passed": { "type": "boolean" },
					"achievedPoints": { "type": "number" },
					"achievedPercent": { "type": "number" },
					"comment": { "type": "string" },
					"_rule": {
						"enum": [
							"INDIVIDUAL_PERCENT_WITH_ALLOWED_FAILURES",
							"REQUIRED_PERCENT_OVERALL"
						],
						"type": "string"
					},
					"_assignmentType": {
						"enum": ["HOMEWORK", "TESTAT", "SEMINAR", "PROJECT", "OTHER"],
						"type": "string"
					}
				},
				"required": [
					"passed",
					"achievedPoints",
					"achievedPercent",
					"_rule",
					"_assignmentType"
				]
			},
			"AdmissionStatusDto": {
				"type": "object",
				"properties": {
					"hasAdmission": { "type": "boolean" },
					"hasAdmissionFromPreviousSemester": { "type": "boolean" },
					"fulfillsAdmissionCriteria": { "type": "boolean" },
					"results": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/RuleCheckResult" }
					},
					"participant": { "$ref": "#/components/schemas/ParticipantDto" }
				},
				"required": [
					"hasAdmission",
					"hasAdmissionFromPreviousSemester",
					"fulfillsAdmissionCriteria",
					"results",
					"participant"
				]
			},
			"SubmissionCreateDto": {
				"type": "object",
				"properties": {
					"userId": { "type": "string" },
					"groupId": { "type": "string" },
					"links": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/LinkDto" }
					},
					"payload": { "type": "object" }
				},
				"required": ["userId"]
			},
			"SubmissionDto": {
				"type": "object",
				"properties": {
					"assignmentId": { "type": "string" },
					"userId": { "type": "string" },
					"displayName": { "type": "string" },
					"date": { "format": "date-time", "type": "string" },
					"groupId": { "type": "string" },
					"groupName": { "type": "string" },
					"links": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/LinkDto" }
					},
					"payload": { "type": "object" }
				},
				"required": ["assignmentId", "userId", "displayName", "date"]
			},
			"NotificationDto": {
				"type": "object",
				"properties": {
					"event": {
						"enum": [
							"COURSE_JOINED",
							"ASSIGNMENT_CREATED",
							"ASSIGNMENT_REMOVED",
							"ASSIGNMENT_STATE_CHANGED",
							"GROUP_REGISTERED",
							"GROUP_UNREGISTERED",
							"USER_REGISTERED",
							"USER_UNREGISTERED",
							"USER_JOINED_GROUP",
							"USER_LEFT_GROUP",
							"REGISTRATIONS_CREATED",
							"REGISTRATIONS_REMOVED"
						],
						"type": "string"
					},
					"courseId": { "type": "string" },
					"assignmentId": { "type": "string" },
					"groupId": { "type": "string" },
					"userId": { "type": "string" },
					"payload": { "type": "object" }
				},
				"required": ["event", "courseId"]
			},
			"SubscriberDto": {
				"type": "object",
				"properties": {
					"name": { "type": "string", "description": "Name of your application." },
					"url": {
						"type": "string",
						"description": "Complete URL to an endpoint in your application that receives HTTP-POST messages."
					},
					"events": {
						"type": "object",
						"description": "Map of events that you want to be notified about. Refer to the Event-Enum for event names. You can use 'ALL' to subscribe to all events.",
						"example": "{\"USER_JOINED_GROUP\": true,\n\t\t\"ASSIGNMENT_STATE_CHANGED\": true\n\t\t}"
					},
					"updateDate": {
						"format": "date-time",
						"type": "string",
						"description": "Date of the creation or latest update to the subscription."
					}
				},
				"required": ["name", "url", "events"]
			},
			"StudentMgmtException": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"enum": [
							"AssignmentNotInReviewStateException",
							"EntityAlreadyExistsError",
							"CourseClosedException",
							"NotACourseMemberException",
							"NotATeachingStaffMember",
							"GroupClosedException",
							"NotAGroupMemberException",
							"GroupsForbiddenException",
							"AlreadyInGroupException"
						]
					}
				},
				"required": ["name"]
			},
			"StudentMgmtEvent": {
				"type": "object",
				"properties": {
					"event": {
						"type": "string",
						"enum": [
							"COURSE_JOINED",
							"ASSIGNMENT_CREATED",
							"ASSIGNMENT_REMOVED",
							"ASSIGNMENT_STATE_CHANGED",
							"GROUP_REGISTERED",
							"GROUP_UNREGISTERED",
							"USER_REGISTERED",
							"USER_UNREGISTERED",
							"USER_JOINED_GROUP",
							"USER_LEFT_GROUP",
							"REGISTRATIONS_CREATED",
							"REGISTRATIONS_REMOVED"
						]
					}
				},
				"required": ["event"]
			},
			"IndividualPercentWithAllowedFailuresRuleDto": {
				"type": "object",
				"properties": {
					"type": {
						"enum": [
							"INDIVIDUAL_PERCENT_WITH_ALLOWED_FAILURES",
							"REQUIRED_PERCENT_OVERALL"
						],
						"type": "string",
						"default": "INDIVIDUAL_PERCENT_WITH_ALLOWED_FAILURES"
					},
					"assignmentType": {
						"enum": ["HOMEWORK", "TESTAT", "SEMINAR", "PROJECT", "OTHER"],
						"type": "string"
					},
					"requiredPercent": { "type": "number", "minimum": 0, "maximum": 100 },
					"achievedPercentRounding": { "$ref": "#/components/schemas/RoundingBehavior" },
					"allowedFailures": { "type": "number", "minimum": 1 }
				},
				"required": [
					"type",
					"assignmentType",
					"requiredPercent",
					"achievedPercentRounding",
					"allowedFailures"
				]
			},
			"OverallPercentRuleDto": {
				"type": "object",
				"properties": {
					"type": {
						"enum": [
							"INDIVIDUAL_PERCENT_WITH_ALLOWED_FAILURES",
							"REQUIRED_PERCENT_OVERALL"
						],
						"type": "string",
						"default": "REQUIRED_PERCENT_OVERALL"
					},
					"assignmentType": {
						"enum": ["HOMEWORK", "TESTAT", "SEMINAR", "PROJECT", "OTHER"],
						"type": "string"
					},
					"requiredPercent": { "type": "number", "minimum": 0, "maximum": 100 },
					"achievedPercentRounding": { "$ref": "#/components/schemas/RoundingBehavior" }
				},
				"required": ["type", "assignmentType", "requiredPercent", "achievedPercentRounding"]
			}
		}
	},
	"paths": {
		"/uptime": {
			"get": {
				"operationId": "AppController_getUptime",
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": { "application/json": { "schema": { "type": "object" } } }
					}
				}
			}
		},
		"/auth/whoAmI": {
			"get": {
				"operationId": "whoAmI",
				"summary": "Get user.",
				"description": "Returns the authenticated user.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserDto" }
							}
						}
					}
				},
				"tags": ["authentication"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/assignments": {
			"post": {
				"operationId": "createAssignment",
				"summary": "Create assignment.",
				"description": "Creates a new assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/AssignmentDto" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AssignmentDto" }
							}
						}
					}
				},
				"tags": ["assignment"],
				"security": [{ "bearer": [] }]
			},
			"get": {
				"operationId": "getAssignmentsOfCourse",
				"summary": "Get assignments of course.",
				"description": "Retrieves all assignments of the course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/AssignmentDto" }
								}
							}
						}
					}
				},
				"tags": ["assignment"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/assignments/{assignmentId}": {
			"get": {
				"operationId": "getAssignmentById",
				"summary": "Get assignment.",
				"description": "Retrieves the assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AssignmentDto" }
							}
						}
					}
				},
				"tags": ["assignment"],
				"security": [{ "bearer": [] }]
			},
			"patch": {
				"operationId": "updateAssignment",
				"summary": "Update assignment.",
				"description": "Updates the assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/AssignmentUpdateDto" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AssignmentDto" }
							}
						}
					}
				},
				"tags": ["assignment"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "deleteAssignment",
				"summary": "Delete assignment.",
				"description": "Deletes the assignment. Returns true, if removal was successful.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["assignment"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/assignments/{assignmentId}/registrations": {
			"post": {
				"operationId": "_registerAllGroups",
				"summary": "Registers all groups.",
				"description": "Registers all groups with their current members for the assignment. Should only be used for testing or when automatic registration fails.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "201": { "description": "" } },
				"tags": ["assignment-registration"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "unregisterAll",
				"summary": "Unregister all.",
				"description": "Removes all registrations for the specified assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["assignment-registration"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/assignments/{assignmentId}/registrations/groups/{groupId}": {
			"post": {
				"operationId": "registerGroup",
				"summary": "Register group.",
				"description": "Registers a group and its members for the assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "201": { "description": "" } },
				"tags": ["assignment-registration"],
				"security": [{ "bearer": [] }]
			},
			"get": {
				"operationId": "getRegisteredGroup",
				"summary": "Get registered group.",
				"description": "Retrieves all registered groups and their members for the specified assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/GroupDto" }
							}
						}
					}
				},
				"tags": ["assignment-registration"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "unregisterGroup",
				"summary": "Unregister group.",
				"description": "Removes the registration of a group and its members for this assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["assignment-registration"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/assignments/{assignmentId}/registrations/groups/{groupId}/members/{userId}": {
			"post": {
				"operationId": "registerParticipantAsGroupMember",
				"summary": "Register participant as group member.",
				"description": "Registers a participant as a member of the specified group for the assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "201": { "description": "" } },
				"tags": ["assignment-registration"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/assignments/{assignmentId}/registrations/groups": {
			"get": {
				"operationId": "getRegisteredGroups",
				"summary": "Get registered groups.",
				"description": "Retrieves all registered groups and their members for the specified assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "skip",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be skipped.",
						"schema": { "type": "number" }
					},
					{
						"name": "take",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be included in the response.",
						"schema": { "type": "number" }
					},
					{
						"name": "groupname",
						"required": false,
						"in": "query",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/GroupDto" }
								}
							}
						}
					}
				},
				"tags": ["assignment-registration"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/assignments/{assignmentId}/registrations/users/{userId}": {
			"get": {
				"operationId": "getRegisteredGroupOfUser",
				"summary": "Get registered group of user.",
				"description": "Retrieves the group that the participant is registered with for the specified assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/GroupDto" }
							}
						}
					}
				},
				"tags": ["assignment-registration"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "unregisterUser",
				"summary": "Unregister user.",
				"description": "Removes the registration of a user for the specified assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["assignment-registration"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/config": {
			"post": {
				"operationId": "createCourseConfig",
				"summary": "Create course config.",
				"description": "Saves a configuration for a course, if it does not have one already.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/CourseConfigDto" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/CourseConfigDto" }
							}
						}
					}
				},
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			},
			"get": {
				"operationId": "getCourseConfig",
				"summary": "Get course config.",
				"description": "Retrieves the configuration of a course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/CourseConfigDto" }
							}
						}
					}
				},
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			},
			"patch": {
				"operationId": "updateCourseConfig",
				"summary": "Update course config.",
				"description": "Updates the configuration of a course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/CourseConfigUpdateDto" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/CourseConfigDto" }
							}
						}
					}
				},
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "removeCourseConfig",
				"summary": "Remove course config.",
				"description": "Removes the complete configuration of a course. Includes group settings, admission criteria and templates.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/config/{configId}/admission-criteria": {
			"post": {
				"operationId": "createAdmissionCriteria",
				"summary": "Create admission criteria.",
				"description": "Creates admission criteria for a course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "configId",
						"required": true,
						"in": "path",
						"schema": { "type": "number" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/AdmissionCriteriaDto" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AdmissionCriteriaDto" }
							}
						}
					}
				},
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/config/{configId}/assignment-templates": {
			"post": {
				"operationId": "createAssignmentTemplate",
				"summary": "Create assignment template.",
				"description": "Creates an assignment template.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "configId",
						"required": true,
						"in": "path",
						"schema": { "type": "number" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/AssignmentTemplateDto" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AssignmentTemplateDto" }
							}
						}
					}
				},
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/config/admission-from-previous-semester": {
			"put": {
				"operationId": "setAdmissionFromPreviousSemester",
				"summary": "Set admission from previous semester.",
				"description": "",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "type": "number" } }
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": { "application/json": { "schema": { "type": "object" } } }
					}
				},
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			},
			"get": {
				"operationId": "getAdmissionFromPreviousSemester",
				"summary": "Get admission from previous semester.",
				"description": "Retrieves a dictionary that maps matrNrs to a UserDto or null (if user does not exist in the system).",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/config/group-settings": {
			"get": {
				"operationId": "getGroupSettings",
				"summary": "Get group settings.",
				"description": "Retrieves the group settings of a course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/GroupSettingsDto" }
							}
						}
					}
				},
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			},
			"patch": {
				"operationId": "updateGroupSettings",
				"summary": "Update group settings.",
				"description": "Updates the group settings of a course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/GroupSettingsUpdateDto" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/GroupSettingsDto" }
							}
						}
					}
				},
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/config/admission-criteria": {
			"get": {
				"operationId": "getAdmissionCriteria",
				"summary": "Get admission criteria.",
				"description": "Retrieves the admission criteria of a course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AdmissionCriteriaDto" }
							}
						}
					}
				},
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			},
			"patch": {
				"operationId": "updateAdmissionCriteria",
				"summary": "Update admission criteria.",
				"description": "Updates the admission criteria of a course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/AdmissionCriteriaDto" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AdmissionCriteriaDto" }
							}
						}
					}
				},
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "removeAdmissionCriteria",
				"summary": "Remove admission criteria.",
				"description": "Removes the admission criteria of a course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/config/assignment-templates": {
			"get": {
				"operationId": "getAssignmentTemplates",
				"summary": "Get assignment templates.",
				"description": "Retrieves the assignment templates of a course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/AssignmentTemplateDto"
									}
								}
							}
						}
					}
				},
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/config/assignment-template/{id}": {
			"patch": {
				"operationId": "updateAssignmentTemplate",
				"summary": "Update assignment template.",
				"description": "Updates the assignment template.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/AssignmentTemplateDto" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AssignmentTemplateDto" }
							}
						}
					}
				},
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "deleteAssignmentTemplate",
				"summary": "Delete assignment template.",
				"description": "Deletes the assignment template.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{ "name": "id", "required": true, "in": "path", "schema": { "type": "number" } }
				],
				"responses": { "200": { "description": "" } },
				"tags": ["course-config"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/users/{userId}": {
			"post": {
				"operationId": "addUser",
				"summary": "Add user to course.",
				"description": "Adds a user to the course. If the course requires a password, the correct password needs to be included in the request body.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/PasswordDto" }
						}
					}
				},
				"responses": { "201": { "description": "" } },
				"tags": ["course-participants"],
				"security": [{ "bearer": [] }]
			},
			"get": {
				"operationId": "getParticipant",
				"summary": "Get participant.",
				"description": "Retrieves a specific participant and course related information about the participant.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ParticipantDto" }
							}
						}
					}
				},
				"tags": ["course-participants"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "removeUser",
				"summary": "Remove user from course.",
				"description": "Removes the user from the course. Returns true, if removal was successful.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["course-participants"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/users": {
			"get": {
				"operationId": "getUsersOfCourse",
				"summary": "Get users of course.",
				"description": "Returns a collection of users that are signed up for this course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "skip",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be skipped.",
						"schema": { "type": "number" }
					},
					{
						"name": "take",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be included in the response.",
						"schema": { "type": "number" }
					},
					{
						"name": "courseRole",
						"required": false,
						"in": "query",
						"schema": {
							"type": "array",
							"items": { "type": "string", "enum": ["LECTURER", "TUTOR", "STUDENT"] }
						}
					},
					{
						"name": "name",
						"required": false,
						"in": "query",
						"description": "Compared to the participant's username and displayName with ILIKE %name%.",
						"schema": { "type": "string" }
					},
					{
						"name": "groupName",
						"required": false,
						"in": "query",
						"description": "Filters by a student's current group. Compared with ILIKE %groupName%.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/ParticipantDto" }
								}
							}
						}
					}
				},
				"tags": ["course-participants"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/users/matrNrs": {
			"get": {
				"operationId": "getParticipantsByMatrNr",
				"summary": "Get participants of course by matrNr.",
				"description": "Returns participants by their matrNr. The response only includes participants that were found, meaning unknown matrNrs will be ignored.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "matrNr",
						"required": true,
						"in": "query",
						"schema": { "type": "array", "items": { "type": "number" } }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/ParticipantDto" }
								}
							}
						}
					}
				},
				"tags": ["course-participants"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/users/query/compare-participants-list": {
			"get": {
				"operationId": "compareParticipantsList",
				"summary": "Compare participants list..",
				"description": "Returns an Object, which divides the course participants in two groups (in/out).",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "compareToCourseIds",
						"required": true,
						"in": "query",
						"schema": { "type": "array", "items": { "type": "string" } }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ParticipantsComparisonDto"
								}
							}
						}
					}
				},
				"tags": ["course-participants"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/users/{userId}/canJoin": {
			"get": {
				"operationId": "canUserJoinCourse",
				"summary": "Check if joining is possible.",
				"description": "Checks, if the user is able to join the course. A user can join a course, if he's not already a member and the course is not closed.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/CanJoinCourseDto" }
							}
						}
					}
				},
				"tags": ["course-participants"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/users/assignments/{assignmentId}/with-assigned-evaluator": {
			"get": {
				"operationId": "getParticipantsWithAssignedEvaluator",
				"summary": "Get participants with assigned evaluator.",
				"description": "Returns participants with their assigned evaluator for a particular assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "skip",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be skipped.",
						"schema": { "type": "number" }
					},
					{
						"name": "take",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be included in the response.",
						"schema": { "type": "number" }
					},
					{
						"name": "assignedEvaluatorId",
						"required": false,
						"in": "query",
						"description": "Filter by assigned evaluator.",
						"schema": { "type": "string" }
					},
					{
						"name": "excludeAlreadyReviewed",
						"required": false,
						"in": "query",
						"description": "Excludes groups/users that have already been reviewed.",
						"schema": { "type": "boolean" }
					},
					{
						"name": "nameOfGroupOrUser",
						"required": false,
						"in": "query",
						"description": "Filter by group or username.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ParticipantsWithAssignedEvaluatorDto"
									}
								}
							}
						}
					}
				},
				"tags": ["course-participants"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/users/{userId}/role": {
			"patch": {
				"operationId": "updateUserRole",
				"summary": "Update user's role in course.",
				"description": "Assigns the given role to the user of this course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/ChangeCourseRoleDto" }
						}
					}
				},
				"responses": { "200": { "description": "" } },
				"tags": ["course-participants"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses": {
			"post": {
				"operationId": "createCourse",
				"summary": "Create course.",
				"description": "Creates a new course.",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/CourseCreateDto" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/CourseDto" }
							}
						}
					}
				},
				"tags": ["course"],
				"security": [{ "bearer": [] }]
			},
			"get": {
				"operationId": "getCourses",
				"summary": "Get courses.",
				"description": "Returns all courses that match the given filter.",
				"parameters": [
					{
						"name": "skip",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be skipped.",
						"schema": { "type": "number" }
					},
					{
						"name": "take",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be included in the response.",
						"schema": { "type": "number" }
					},
					{
						"name": "shortname",
						"required": false,
						"in": "query",
						"schema": { "type": "string" }
					},
					{
						"name": "semester",
						"required": false,
						"in": "query",
						"schema": { "type": "string" }
					},
					{
						"name": "title",
						"required": false,
						"in": "query",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/CourseDto" }
								}
							}
						}
					}
				},
				"tags": ["course"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}": {
			"get": {
				"operationId": "getCourseById",
				"summary": "Get course.",
				"description": "Retrieves the course, if the requesting user is a member of this course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/CourseDto" }
							}
						}
					}
				},
				"tags": ["course"],
				"security": [{ "bearer": [] }]
			},
			"patch": {
				"operationId": "updateCourse",
				"summary": "Update course.",
				"description": "Updates the course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/CourseDto" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/CourseDto" }
							}
						}
					}
				},
				"tags": ["course"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "deleteCourse",
				"summary": "Delete course.",
				"description": "Deletes the course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["course"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/about": {
			"get": {
				"operationId": "getCourseAbout",
				"summary": "Get information about the course.",
				"description": "Retrieves the course and information that is required by its /about page.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/CourseAboutDto" }
							}
						}
					}
				},
				"tags": ["course"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{name}/semester/{semester}": {
			"get": {
				"operationId": "getCourseByNameAndSemester",
				"summary": "Get course by name and semester.",
				"description": "",
				"parameters": [
					{
						"name": "name",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "semester",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/CourseDto" }
							}
						}
					}
				},
				"tags": ["course"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/groups": {
			"post": {
				"operationId": "createGroup",
				"summary": "Create group.",
				"description": "Creates a new group, if course allows group creation. If request was triggered by student, student is automatically joining the group.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/GroupDto" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/GroupDto" }
							}
						}
					}
				},
				"tags": ["group"],
				"security": [{ "bearer": [] }]
			},
			"get": {
				"operationId": "getGroupsOfCourse",
				"summary": "Get groups of course.",
				"description": "Retrieves all groups that belong to the course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "skip",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be skipped.",
						"schema": { "type": "number" }
					},
					{
						"name": "take",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be included in the response.",
						"schema": { "type": "number" }
					},
					{
						"name": "name",
						"required": false,
						"in": "query",
						"description": "Name of the group. Compared with ILIKE %name%.",
						"schema": { "type": "string" }
					},
					{
						"name": "memberName",
						"required": false,
						"in": "query",
						"description": "Name of a member. Compared with ILIKE %memberName%.",
						"schema": { "type": "string" }
					},
					{
						"name": "isClosed",
						"required": false,
						"in": "query",
						"description": "If true, only includes closed groups.",
						"schema": { "type": "boolean" }
					},
					{
						"name": "excludeEmpty",
						"required": false,
						"in": "query",
						"description": "If true, excludes empty groups.",
						"schema": { "type": "boolean" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/GroupDto" }
								}
							}
						}
					}
				},
				"tags": ["group"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/groups/bulk": {
			"post": {
				"operationId": "createMultipleGroups",
				"summary": "Create multiple groups.",
				"description": "Creates multiple groups with the given names or naming schema and count.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/GroupCreateBulkDto" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/GroupDto" }
								}
							}
						}
					}
				},
				"tags": ["group"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/groups/joinOrCreateGroup": {
			"post": {
				"operationId": "joinOrCreateGroup",
				"summary": "Join or create group.",
				"description": "Tries to add the user to an open group with sufficient capacity. If no such group exists, creates a new group and adds the requesting user. Returns the joined group and its members.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/GroupDto" }
							}
						}
					}
				},
				"tags": ["group"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/groups/{groupId}/users/{userId}": {
			"post": {
				"operationId": "addUserToGroup",
				"summary": "Add user to group.",
				"description": "Adds the user to the group, if constraints are fulfilled.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/PasswordDto" }
						}
					}
				},
				"responses": { "201": { "description": "" } },
				"tags": ["group"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "removeUserFromGroup",
				"summary": "Remove user.",
				"description": "Removes the user from the group.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["group"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/groups/history": {
			"get": {
				"operationId": "getGroupHistoryOfCourse",
				"summary": "Get group history of course.",
				"description": "Retrieves all group events of the course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/GroupEventDto" }
								}
							}
						}
					}
				},
				"tags": ["group"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/groups/assignments/{assignmentId}/with-assigned-evaluator": {
			"get": {
				"operationId": "getGroupsWithAssignedEvaluator",
				"summary": "Get groups with assigned evaluator.",
				"description": "Retrieves groups with their assigned evaluator for an assignment",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "skip",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be skipped.",
						"schema": { "type": "number" }
					},
					{
						"name": "take",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be included in the response.",
						"schema": { "type": "number" }
					},
					{
						"name": "assignedEvaluatorId",
						"required": false,
						"in": "query",
						"description": "Filter by assigned evaluator.",
						"schema": { "type": "string" }
					},
					{
						"name": "excludeAlreadyReviewed",
						"required": false,
						"in": "query",
						"description": "Excludes groups/users that have already been reviewed.",
						"schema": { "type": "boolean" }
					},
					{
						"name": "nameOfGroupOrUser",
						"required": false,
						"in": "query",
						"description": "Filter by group or username.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/GroupWithAssignedEvaluatorDto"
									}
								}
							}
						}
					}
				},
				"tags": ["group"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/groups/{groupId}": {
			"get": {
				"operationId": "getGroup",
				"summary": "Get group.",
				"description": "Returns the group with its members.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/GroupDto" }
							}
						}
					}
				},
				"tags": ["group"],
				"security": [{ "bearer": [] }]
			},
			"patch": {
				"operationId": "updateGroup",
				"summary": "Update group.",
				"description": "Updates the group partially.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/GroupUpdateDto" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/GroupDto" }
							}
						}
					}
				},
				"tags": ["group"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "deleteGroup",
				"summary": "Delete group.",
				"description": "Deletes the group.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["group"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/groups/{groupId}/users": {
			"get": {
				"operationId": "getUsersOfGroup",
				"summary": "Get users of group.",
				"description": "Retrieves all users that are members of the group.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/ParticipantDto" }
								}
							}
						}
					}
				},
				"tags": ["group"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/groups/{groupId}/assessments": {
			"get": {
				"operationId": "getAssessmentsOfGroup",
				"summary": "Get assessments of group.",
				"description": "Retrieves all assessments of this group.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/AssessmentDto" }
								}
							}
						}
					}
				},
				"tags": ["group"],
				"security": [{ "bearer": [] }]
			}
		},
		"/users": {
			"post": {
				"operationId": "createUser",
				"summary": "Create user.",
				"description": "Creates a user.",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/UserDto" } }
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserDto" }
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			},
			"get": {
				"operationId": "getUsers",
				"summary": "Get users.",
				"description": "Retrieves all users that match the specified filter.",
				"parameters": [
					{
						"name": "skip",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be skipped.",
						"schema": { "type": "number" }
					},
					{
						"name": "take",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be included in the response.",
						"schema": { "type": "number" }
					},
					{
						"name": "username",
						"required": false,
						"in": "query",
						"schema": { "type": "string" }
					},
					{
						"name": "displayName",
						"required": false,
						"in": "query",
						"schema": { "type": "string" }
					},
					{
						"name": "roles",
						"required": false,
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"enum": ["SYSTEM_ADMIN", "ADMIN_TOOL", "MGMT_ADMIN", "USER"]
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/UserDto" }
								}
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			}
		},
		"/users/{userId}": {
			"get": {
				"operationId": "getUserById",
				"summary": "Get user.",
				"description": "Retrieves the user.",
				"parameters": [
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserDto" }
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			},
			"patch": {
				"operationId": "updateUser",
				"summary": "Update user.",
				"description": "Updates the user",
				"parameters": [
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/UserUpdateDto" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserDto" }
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "deleteUser",
				"summary": "Delete user.",
				"description": "Deletes the user. Returns true, if removes was successful.",
				"parameters": [
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			}
		},
		"/users/email/{email}": {
			"get": {
				"operationId": "getUserbyEmail",
				"summary": "Get user by email.",
				"description": "Retrieves a user by email.",
				"parameters": [
					{
						"name": "email",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserDto" }
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			}
		},
		"/users/{userId}/courses": {
			"get": {
				"operationId": "getCoursesOfUser",
				"summary": "Get courses of user.",
				"description": "Retrieves all courses that the user is a member of.",
				"parameters": [
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/CourseDto" }
								}
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			}
		},
		"/users/{userId}/courses/{courseId}/groups": {
			"get": {
				"operationId": "getGroupOfUserForCourse",
				"summary": "Get group of user for course.",
				"description": "Retrieves the user's current group in a course.",
				"parameters": [
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/GroupDto" }
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			}
		},
		"/users/{userId}/courses/{courseId}/group-history": {
			"get": {
				"operationId": "getGroupHistoryOfUser",
				"summary": "Get group history of user for course.",
				"description": "Retrieves the group history of a user in a course. Events are sorted by timestamp in descending order (new to old).",
				"parameters": [
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/GroupEventDto" }
								}
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			}
		},
		"/users/{userId}/courses/{courseId}/assignments/{assignmentId}/group": {
			"get": {
				"operationId": "getGroupOfAssignment",
				"summary": "Get group of assignment.",
				"description": "Retrieves the registered group of this user for a particular assignment.",
				"parameters": [
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/GroupDto" }
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			}
		},
		"/users/{userId}/courses/{courseId}/assignments/{assignmentId}/assessment": {
			"get": {
				"operationId": "getAssessmentOfUser",
				"summary": "Get assessment of user.",
				"description": "Retrieves the assessment of a user for a specific assignment. If requested by PARTICIPANT, assessment must be EVALUATED.",
				"parameters": [
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AssessmentDto" }
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			}
		},
		"/users/{userId}/courses/{courseId}/assignments/groups": {
			"get": {
				"operationId": "getGroupOfAllAssignments",
				"summary": "Get group of all assignments.",
				"description": "Maps all assignments of a course to the user's group for the corresponding assignment.",
				"parameters": [
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/AssignmentGroupTuple" }
								}
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			}
		},
		"/users/{userId}/courses/{courseId}/assessments": {
			"get": {
				"operationId": "getAssessmentsOfUserForCourse",
				"summary": "Get assessments.",
				"description": "Returns all assessments of the user in the given course. Includes the group, if assessment specified a group.",
				"parameters": [
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/AssessmentDto" }
								}
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			}
		},
		"/users/{userId}/settings": {
			"put": {
				"operationId": "updateSettings",
				"summary": "Update settings.",
				"description": "Updates the settings of a user.",
				"parameters": [
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/UserSettingsDto" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserSettingsDto" }
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			},
			"get": {
				"operationId": "getSettings",
				"summary": "Get settings.",
				"description": "Returns the settings of a user.",
				"parameters": [
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserSettingsDto" }
							}
						}
					}
				},
				"tags": ["user"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/assignments/{assignmentId}/assessment-allocations": {
			"post": {
				"operationId": "createAllocation",
				"summary": "Assign assessment to evaluator.",
				"description": "Maps an evaluator to a group or user. If the group or user is already assigned to another evaluator, changes the evaluator.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/AssessmentAllocationDto" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AssessmentAllocationDto" }
							}
						}
					}
				},
				"tags": ["assessment-allocation"],
				"security": [{ "bearer": [] }]
			},
			"get": {
				"operationId": "getAllocations",
				"summary": "Get assessment allocations.",
				"description": "Returns a list of allocations, which map an evaluator to a group or user.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/AssessmentAllocationDto"
									}
								}
							}
						}
					}
				},
				"tags": ["assessment-allocation"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "removeAllocation",
				"summary": "Remove allocation.",
				"description": "Removes the assignment of the specified group or user. Throws error, if removal was unsuccessful.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": false,
						"in": "query",
						"description": "Query must specify either groupId or userId.",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": false,
						"in": "query",
						"description": "Query must specify either groupId or userId.",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["assessment-allocation"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/assignments/{assignmentId}/assessment-allocations/from-existing/{existingAssignmentId}": {
			"post": {
				"operationId": "addAllocationsFromExistingAssignment",
				"summary": "Copy assessment allocation from another assignment.",
				"description": "Applies the allocations from another assignment to the specified assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "existingAssignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/AssessmentAllocationDto"
									}
								}
							}
						}
					}
				},
				"tags": ["assessment-allocation"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/assignments/{assignmentId}/assessment-allocations/all": {
			"delete": {
				"operationId": "AssessmentAllocationController_removeAllAllocationsOfAssignment",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["assessment-allocation"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/assignments/{assignmentId}/assessments": {
			"post": {
				"operationId": "createAssessment",
				"summary": "Create assessment.",
				"description": "Creates a new assessment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/AssessmentCreateDto" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AssessmentDto" }
							}
						}
					}
				},
				"tags": ["assessment"],
				"security": [{ "bearer": [] }]
			},
			"get": {
				"operationId": "getAssessmentsForAssignment",
				"summary": "Get assessments of assignment.",
				"description": "Retrieves assessments that have been created for the assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "skip",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be skipped.",
						"schema": { "type": "number" }
					},
					{
						"name": "take",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be included in the response.",
						"schema": { "type": "number" }
					},
					{
						"name": "name",
						"required": false,
						"in": "query",
						"description": "Name of group or user. Matched with ILIKE %name%.",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": false,
						"in": "query",
						"description": "Retrieves assessment of specific group.",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": false,
						"in": "query",
						"description": "Retrieves assessment of specific user.",
						"schema": { "type": "string" }
					},
					{
						"name": "minScore",
						"required": false,
						"in": "query",
						"description": "Only includes assessments with achievedPoints >= minScore, if specified.",
						"schema": { "type": "number" }
					},
					{
						"name": "creatorId",
						"required": false,
						"in": "query",
						"description": "Only includes assessments created by specified user.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/AssessmentDto" }
								}
							}
						}
					}
				},
				"tags": ["assessment"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/assignments/{assignmentId}/assessments/{assessmentId}": {
			"put": {
				"operationId": "setPartialAssessment",
				"summary": "Set partial assessment.",
				"description": "Adds or updates the partial assessment with the specified key.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assessmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/PartialAssessmentDto" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/PartialAssessmentDto" }
							}
						}
					}
				},
				"tags": ["assessment"],
				"security": [{ "bearer": [] }]
			},
			"get": {
				"operationId": "getAssessmentById",
				"summary": "Get assessment.",
				"description": "Retrieves the assessment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assessmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AssessmentDto" }
							}
						}
					}
				},
				"tags": ["assessment"],
				"security": [{ "bearer": [] }]
			},
			"patch": {
				"operationId": "updateAssessment",
				"summary": "Update assessment.",
				"description": "Updates the assessment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assessmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/AssessmentUpdateDto" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AssessmentDto" }
							}
						}
					}
				},
				"tags": ["assessment"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "deleteAssessment",
				"summary": "Delete assessment.",
				"description": "Deletes the assessment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assessmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["assessment"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/assignments/{assignmentId}/assessments/{assessmentId}/events": {
			"get": {
				"operationId": "getEventsOfAssessment",
				"summary": "Get assessment events.",
				"description": "Retrieves events of the assessment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assessmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/AssessmentEventDto" }
								}
							}
						}
					}
				},
				"tags": ["assessment"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/admission-status/overview": {
			"get": {
				"operationId": "getPointsOverview",
				"summary": "Get points overview.",
				"description": "Returns an overview of the achieved points of all students mapped the assignments.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/PointsOverviewDto" }
							}
						}
					}
				},
				"tags": ["admission-status"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/admission-status/overview/{userId}": {
			"get": {
				"operationId": "getPointsOverviewOfStudent",
				"summary": "Get points overview of student.",
				"description": "Returns an overview of the achieved points of a student mapped the assignments.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/PointsOverviewDto" }
							}
						}
					}
				},
				"tags": ["admission-status"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/admission-status": {
			"get": {
				"operationId": "getAdmissionStatusOfParticipants",
				"summary": "Get admission status.",
				"description": "Returns the admission status of all participants.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/AdmissionStatusDto" }
								}
							}
						}
					}
				},
				"tags": ["admission-status"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/admission-status/{userId}": {
			"get": {
				"operationId": "getAdmissionStatusOfParticipant",
				"summary": "Get admission status.",
				"description": "Returns the admission status of all participants.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/AdmissionStatusDto" }
							}
						}
					}
				},
				"tags": ["admission-status"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/submissions/assignments/{assignmentId}": {
			"post": {
				"operationId": "add",
				"summary": "Add submission",
				"description": "Adds a submission for the specified assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/SubmissionCreateDto" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/SubmissionDto" }
							}
						}
					}
				},
				"tags": ["submission"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "removeAllSubmissionsOfAssignment",
				"summary": "Remove all submissions of assignment",
				"description": "Removes all submissions of an assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["submission"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/submissions/users/{userId}/assignments/{assignmentId}": {
			"get": {
				"operationId": "getLatestSubmissionOfAssignment",
				"summary": "Get latest submission of assignment.",
				"description": "Retrieves the latest submission of a user or their group for a specific assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/SubmissionDto" }
							}
						}
					}
				},
				"tags": ["submission"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/submissions/users/{userId}": {
			"get": {
				"operationId": "getAllSubmissionsOfUser",
				"summary": "Get all submissions of user.",
				"description": "Retrieves all submissions for an assignment that were submitted by this user (does not include submissions of group members).",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "userId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/SubmissionDto" }
								}
							}
						}
					}
				},
				"tags": ["submission"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/submissions/groups/{groupId}/assignments/{assignmentId}": {
			"get": {
				"operationId": "getAllSubmissionsOfAssignmentOfGroup",
				"summary": "Get all submissions of assignment of group.",
				"description": "Retrieves all submissions of a group for a specific assignment.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/SubmissionDto" }
								}
							}
						}
					}
				},
				"tags": ["submission"],
				"security": [{ "bearer": [] }]
			}
		},
		"/courses/{courseId}/submissions": {
			"get": {
				"operationId": "getAllSubmissions",
				"summary": "Get all submissions.",
				"description": "Retrieves all submissions that match the given filter.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "skip",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be skipped.",
						"schema": { "type": "number" }
					},
					{
						"name": "take",
						"required": false,
						"in": "query",
						"description": "[Pagination] The amount of elements that should be included in the response.",
						"schema": { "type": "number" }
					},
					{
						"name": "userId",
						"required": false,
						"in": "query",
						"description": "Filters by userId.",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": false,
						"in": "query",
						"description": "Filters by assignmentId.",
						"schema": { "type": "string" }
					},
					{
						"name": "groupId",
						"required": false,
						"in": "query",
						"description": "Filters by groupId.",
						"schema": { "type": "string" }
					},
					{
						"name": "displayName",
						"required": false,
						"in": "query",
						"description": "Filters by user's displayName. Matched with ILIKE %displayName%.",
						"schema": { "type": "string" }
					},
					{
						"name": "groupName",
						"required": false,
						"in": "query",
						"description": "Filters by group name. Matched with ILIKE %groupName%.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/SubmissionDto" }
								}
							}
						}
					}
				},
				"tags": ["submission"],
				"security": [{ "bearer": [] }]
			}
		},
		"/notifications/courses/{courseId}/notify": {
			"post": {
				"operationId": "notify",
				"summary": "Simulate an event to notify subscribers.",
				"description": "Notifies all subscribers using the given notification.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/NotificationDto" }
						}
					}
				},
				"responses": { "201": { "description": "" } },
				"tags": ["notification"],
				"security": [{ "bearer": [] }]
			}
		},
		"/notifications/courses/{courseId}/testNotify": {
			"post": {
				"operationId": "NotificationController_testNotify",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/NotificationDto" }
						}
					}
				},
				"responses": { "201": { "description": "" } },
				"tags": ["notification"],
				"security": [{ "bearer": [] }]
			}
		},
		"/notifications/courses/{courseId}/subscribers/{name}": {
			"put": {
				"operationId": "subscribe",
				"summary": "Subscribe to events.",
				"description": "Adds or updates a subscriber.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "name",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/SubscriberDto" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/SubscriberDto" }
							}
						}
					}
				},
				"tags": ["notification"],
				"security": [{ "bearer": [] }]
			},
			"delete": {
				"operationId": "unsubscribe",
				"summary": "Unsubscribe.",
				"description": "Removes the subscriber.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "name",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["notification"],
				"security": [{ "bearer": [] }]
			}
		},
		"/notifications/courses/{courseId}/subscribers": {
			"get": {
				"operationId": "getSubscribers",
				"summary": "Get subscribers.",
				"description": "Retrieves all subscribers of a course.",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": { "$ref": "#/components/schemas/SubscriberDto" }
								}
							}
						}
					}
				},
				"tags": ["notification"],
				"security": [{ "bearer": [] }]
			}
		},
		"/export/{courseId}/{domain}": {
			"get": {
				"operationId": "ExportController_export",
				"parameters": [
					{
						"name": "courseId",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "domain",
						"required": true,
						"in": "path",
						"schema": { "type": "string" }
					},
					{
						"name": "assignmentId",
						"required": true,
						"in": "query",
						"schema": { "type": "string" }
					}
				],
				"responses": { "200": { "description": "" } },
				"tags": ["export"]
			}
		},
		"/mail/simulateEvent": {
			"post": {
				"operationId": "MailingController_simulateEvent",
				"parameters": [],
				"responses": { "201": { "description": "" } },
				"tags": ["mail"]
			}
		}
	}
}
